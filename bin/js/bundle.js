(function () {
    'use strict';

    class GameManager extends Laya.Script {
        // 在此声明给开发界面(所有要展示值的组件都要)
        /** @prop {name:lblCountDownValue, tips:"倒计时", type:Node, default:null}*/
        /** @prop {name:lblScoreValue, tips:"得分", type:Node, default:null}*/
        /** @prop {name:dialogGameOver, tips:"游戏结束", type:Node, default:null}*/
        /** @prop {name:lblScoreCurrentValue, tips:"当前成绩", type:Node, default:null}*/
        /** @prop {name:lblScoreHighestValue, tips:"历史最高", type:Node, default:null}*/

        constructor() {
            super();

            // 在此声明值给代码(所有要展示值的组件都要)
            this.lblCountDownValue = null;
            this.lblScoreValue = null;
            this.dialogGameOver = null;
            this.lblScoreCurrentValue = null;
            this.lblScoreHighestValue = null;
        }

        // 通常用于声明成员变量
        onAwake() {

            this.isPlaying = false;
            this.btnPlayAgain = null;

     
        }

        // 每一帧函数执行之前执行，一般用于初始化
        onStart() {
            this.btnPlayAgain = this.dialogGameOver.getChildByName("btnPlayAgain"); //获取对象
            this.btnPlayAgain.on(Laya.Event.MOUSE_DOWN,this,function(){

                this.gameStart(); //点击重新开始时，再次执行gameStart方法

            }); //监听事件(点击鼠标)

            this.gameStart(); //初始化时开始gameStart方法
        }

        onDisable() {}

        onUpdate() {}


        // 自定义方法

        // 每秒执行方法
        onOneSecond() {
            this.nCountDown--; //每秒减1
            this.lblCountDownValue.text = ""+this.nCountDown;   // 清空并更新UI里的值

            if (this.nCountDown <= 0) {
                this.GameOver();
            }

        }
        gameStart() {
            this.isPlaying = true;

            this.dialogGameOver.visible = false; //把节点的visible属性改为false

            // 每次开始游戏时，重置游戏数据
            this.nCountDown = 5;
            this.nScore = 0;

            this.lblCountDownValue.text = this.nCountDown;   // 更新UI里的值
            this.lblScoreValue.text = this.nScore;   // 更新UI里的值


            // 调用定时器API，每秒执行onOneSecond函数，函数另外实现
            Laya.timer.loop(1000, this, this.onOneSecond);
            
        }

        GameOver() {
            this.isPlaying = false;

            this.dialogGameOver.visible = true; //把节点的visible属性改为true

            Laya.timer.clear(this, this.onOneSecond);

        };

    }

    class template extends Laya.Script {
        // 在此声明给开发界面(所有要展示值的组件都要)


        constructor() {
            super();

        // 在此声明值给代码(所有要展示值的组件都要)
            this.xxx = null;
        }

        // 通常用于声明成员变量
        onAwake() {}

        // 每一帧函数执行之前执行，一般用于初始化
        onStart() {}

        onDisable() {}

        onUpdate() {}

        // 自定义方法

    }

    /**This class is automatically generated by LayaAirIDE, please do not make any modifications. */

    class GameConfig {
        static init() {
            //注册Script或者Runtime引用
            let reg = Laya.ClassUtils.regClass;
    		reg("game/GameManager.js",GameManager);
    		reg("game/Mouse.js",template);
        }
    }
    GameConfig.width = 960;
    GameConfig.height = 640;
    GameConfig.scaleMode ="fixedheight";
    GameConfig.screenMode = "horizontal";
    GameConfig.alignV = "middle";
    GameConfig.alignH = "center";
    GameConfig.startScene = "GameScene.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;

    GameConfig.init();

    class Main {
    	constructor() {
    		//根据IDE设置初始化引擎		
    		if (window["Laya3D"]) Laya3D.init(GameConfig.width, GameConfig.height);
    		else Laya.init(GameConfig.width, GameConfig.height, Laya["WebGL"]);
    		Laya["Physics"] && Laya["Physics"].enable();
    		Laya["DebugPanel"] && Laya["DebugPanel"].enable();
    		Laya.stage.scaleMode = GameConfig.scaleMode;
    		Laya.stage.screenMode = GameConfig.screenMode;
    		Laya.stage.alignV = GameConfig.alignV;
    		Laya.stage.alignH = GameConfig.alignH;
    		//兼容微信不支持加载scene后缀场景
    		Laya.URL.exportSceneToJson = GameConfig.exportSceneToJson;

    		//打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
    		if (GameConfig.debug || Laya.Utils.getQueryString("debug") == "true") Laya.enableDebugPanel();
    		if (GameConfig.physicsDebug && Laya["PhysicsDebugDraw"]) Laya["PhysicsDebugDraw"].enable();
    		if (GameConfig.stat) Laya.Stat.show();
    		Laya.alertGlobalError(true);

    		//激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
    		Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    	}

    	onVersionLoaded() {
    		//激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
    		Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    	}

    	onConfigLoaded() {
    		//加载IDE指定的场景
    		GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
    	}
    }
    //激活启动类
    new Main();

}());
